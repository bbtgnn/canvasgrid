{"version":3,"file":"index.modern.js","sources":["../src/classes.ts"],"sourcesContent":["function round(v: number, d = 2): number {\n  const p = Math.pow(10, d);\n  return Math.round(v * p) / p;\n}\n\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = round(x);\n    this.y = round(y);\n  }\n\n  add(point: Point): Point {\n    return new Point(this.x + point.x, this.y + point.y);\n  }\n\n  smult(value: number): Point {\n    return new Point(this.x * value, this.y * value);\n  }\n\n  vscale(scale: Point, origin = new Point(0, 0)): Point {\n    return new Point(\n      origin.x + (this.x - origin.x) * scale.x,\n      origin.y + (this.y - origin.y) * scale.y\n    );\n  }\n\n  sscale(scale: number, origin = new Point(0, 0)): Point {\n    return this.vscale(new Point(scale, scale), origin);\n  }\n}\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = round(width);\n    this.height = round(height);\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  fitSize(ratio: number): Size {\n    let width: number;\n    let height: number;\n    //\n    if (this.ratio > ratio) {\n      height = this.height;\n      width = height * ratio;\n    }\n    //\n    else {\n      width = this.width;\n      height = width / ratio;\n    }\n    return new Size(width, height);\n  }\n}\n\nexport class Rectangle {\n  origin: Point;\n  size: Size;\n\n  constructor(origin: Point, size: Size) {\n    this.origin = origin;\n    this.size = size;\n  }\n\n  // Simple shortcuts\n\n  get x(): number {\n    return this.origin.x;\n  }\n\n  get y(): number {\n    return this.origin.y;\n  }\n\n  get width(): number {\n    return this.size.width;\n  }\n\n  get height(): number {\n    return this.size.height;\n  }\n\n  get ratio(): number {\n    return this.size.ratio;\n  }\n\n  //\n\n  translate(vector: Point): Rectangle {\n    return new Rectangle(this.origin.add(vector), this.size);\n  }\n\n  fitRectangleCenter(ratio: number): Rectangle {\n    // Getting the base size\n    const size = this.size.fitSize(ratio);\n    // Then we calculate its new x & y\n    const x = this.origin.x + (this.width - size.width) / 2;\n    const y = this.origin.y + (this.height - size.height) / 2;\n    //\n    return new Rectangle(new Point(x, y), size);\n  }\n}\n\nexport class Cell extends Rectangle {\n  index: { i: number; j: number };\n\n  constructor(origin: Point, size: Size, index: { i: number; j: number }) {\n    super(origin, size);\n    this.index = index;\n  }\n\n  get i(): number {\n    return this.index.i;\n  }\n\n  get j(): number {\n    return this.index.j;\n  }\n}\n\nexport class UnitGrid {\n  rows: number;\n  columns: number;\n  cell_ratio: number;\n  spacing: {\n    column: number;\n    row: number;\n  };\n\n  constructor(\n    rows: number,\n    columns: number,\n    cell_ratio = 1,\n    spacing = { column: 0, row: 0 }\n  ) {\n    this.rows = rows;\n    this.columns = columns;\n    this.cell_ratio = cell_ratio;\n    this.spacing = spacing;\n  }\n\n  get height(): number {\n    /**\n     * number of cells in a column   * cell height +\n     * number of gaps between colums * gap height\n     */\n    return this.rows * 1 + (this.rows - 1) * this.spacing.row;\n  }\n\n  get width(): number {\n    /**\n     * number of cell in row        * cell width +\n     * number of gaps between rows  * gap width\n     */\n    return (\n      this.columns * this.cell_ratio + (this.columns - 1) * this.spacing.column\n    );\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  getCellHeightFromGridHeight(height: number): number {\n    return height / this.height;\n  }\n\n  getCellHeightFromGridWidth(width: number): number {\n    return width / this.width;\n  }\n\n  getCells(cell_height = 1, translation = new Point(0, 0)): Array<Cell> {\n    const cells: Array<Cell> = [];\n    for (let r = 0; r < this.rows; r++) {\n      const y: number = r * (1 + this.spacing.row);\n      for (let c = 0; c < this.columns; c++) {\n        const x: number = c * (this.cell_ratio + this.spacing.column);\n        const origin = new Point(x, y).sscale(cell_height).add(translation);\n        cells.push(\n          new Cell(\n            origin,\n            new Size(cell_height * this.cell_ratio, cell_height),\n            {\n              i: r,\n              j: c,\n            }\n          )\n        );\n      }\n    }\n    return cells;\n  }\n}\n"],"names":["round","v","d","p","Math","pow","Point","constructor","x","y","add","point","smult","value","vscale","scale","origin","sscale","Size","width","height","ratio","fitSize","Rectangle","size","translate","vector","fitRectangleCenter","Cell","index","i","j","UnitGrid","rows","columns","cell_ratio","spacing","column","row","getCellHeightFromGridHeight","getCellHeightFromGridWidth","getCells","cell_height","translation","cells","r","c","push"],"mappings":"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"}