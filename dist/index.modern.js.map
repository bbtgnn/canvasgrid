{"version":3,"file":"index.modern.js","sources":["../src/classes.ts"],"sourcesContent":["function round(v: number, d = 2): number {\n  const p = Math.pow(10, d);\n  return Math.round(v * p) / p;\n}\n\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = round(x);\n    this.y = round(y);\n  }\n\n  add(point: Point): Point {\n    return new Point(this.x + point.x, this.y + point.y);\n  }\n\n  smult(value: number): Point {\n    return new Point(this.x * value, this.y * value);\n  }\n\n  vscale(scale: Point, origin = new Point(0, 0)): Point {\n    return new Point(\n      origin.x + (this.x - origin.x) * scale.x,\n      origin.y + (this.y - origin.y) * scale.y\n    );\n  }\n\n  sscale(scale: number, origin = new Point(0, 0)): Point {\n    return this.vscale(new Point(scale, scale), origin);\n  }\n}\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = round(width);\n    this.height = round(height);\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  fitSize(ratio: number): Size {\n    let width: number;\n    let height: number;\n    //\n    if (this.ratio > ratio) {\n      height = this.height;\n      width = height * ratio;\n    }\n    //\n    else {\n      width = this.width;\n      height = width / ratio;\n    }\n    return new Size(width, height);\n  }\n}\n\nexport class Rectangle {\n  origin: Point;\n  size: Size;\n\n  constructor(origin: Point, size: Size) {\n    this.origin = origin;\n    this.size = size;\n  }\n\n  // Simple shortcuts\n\n  get x(): number {\n    return this.origin.x;\n  }\n\n  get y(): number {\n    return this.origin.y;\n  }\n\n  get width(): number {\n    return this.size.width;\n  }\n\n  get height(): number {\n    return this.size.height;\n  }\n\n  get ratio(): number {\n    return this.size.ratio;\n  }\n\n  //\n\n  translate(vector: Point): Rectangle {\n    return new Rectangle(this.origin.add(vector), this.size);\n  }\n\n  fitRectangleCenter(ratio: number): Rectangle {\n    // Getting the base size\n    const size = this.size.fitSize(ratio);\n    // Then we calculate its new x & y\n    const x = this.origin.x + (this.width - size.width) / 2;\n    const y = this.origin.y + (this.height - size.height) / 2;\n    //\n    return new Rectangle(new Point(x, y), size);\n  }\n}\n\nexport class Cell extends Rectangle {\n  index: { i: number; j: number };\n\n  constructor(origin: Point, size: Size, index: { i: number; j: number }) {\n    super(origin, size);\n    this.index = index;\n  }\n\n  get i(): number {\n    return this.index.i;\n  }\n\n  get j(): number {\n    return this.index.j;\n  }\n}\n\nexport class UnitGrid {\n  rows: number;\n  columns: number;\n  cell_ratio: number;\n  spacing: {\n    column: number;\n    row: number;\n  };\n\n  constructor(\n    rows: number,\n    columns: number,\n    cell_ratio = 1,\n    spacing = { column: 0, row: 0 }\n  ) {\n    this.rows = rows;\n    this.columns = columns;\n    this.cell_ratio = cell_ratio;\n    this.spacing = spacing;\n  }\n\n  get height(): number {\n    /**\n     * number of cells in a column   * cell height +\n     * number of gaps between colums * gap height\n     */\n    return this.rows * 1 + (this.rows - 1) * this.spacing.row;\n  }\n\n  get width(): number {\n    /**\n     * number of cell in row        * cell width +\n     * number of gaps between rows  * gap width\n     */\n    return (\n      this.columns * this.cell_ratio + (this.columns - 1) * this.spacing.column\n    );\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  getCellHeightFromGridHeight(height: number): number {\n    return height / this.height;\n  }\n\n  getCellHeightFromGridWidth(width: number): number {\n    return width / this.width;\n  }\n\n  getCells(cell_height = 1, translation = new Point(0, 0)): Array<Cell> {\n    const cells: Array<Cell> = [];\n    for (let r = 0; r < this.rows; r++) {\n      const y: number = r * (1 + this.spacing.row);\n      for (let c = 0; c < this.columns; c++) {\n        const x: number = c * (this.cell_ratio + this.spacing.column);\n        const origin = new Point(x, y).sscale(cell_height).add(translation);\n        cells.push(\n          new Cell(\n            origin,\n            new Size(cell_height * this.cell_ratio, cell_height),\n            {\n              i: r,\n              j: c,\n            }\n          )\n        );\n      }\n    }\n    return cells;\n  }\n}\n"],"names":["round","v","d","p","Math","pow","Point","constructor","x","y","this","add","point","smult","value","vscale","scale","origin","sscale","Size","width","height","ratio","fitSize","Rectangle","size","translate","vector","fitRectangleCenter","Cell","index","super","i","j","UnitGrid","rows","columns","cell_ratio","spacing","column","row","getCellHeightFromGridHeight","getCellHeightFromGridWidth","getCells","cell_height","translation","cells","r","c","push"],"mappings":"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"}