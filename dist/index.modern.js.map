{"version":3,"file":"index.modern.js","sources":["../src/Point.ts","../src/Size.ts","../src/Rectangle.ts","../src/Cell.ts","../src/Grid.ts","../src/getCanvasGrid.ts"],"sourcesContent":["export default class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(point: Point): Point {\n    return new Point(this.x + point.x, this.y + point.y);\n  }\n\n  sub(point: Point): Point {\n    return new Point(this.x - point.x, this.y - point.y);\n  }\n\n  smult(value: number): Point {\n    return new Point(this.x * value, this.y * value);\n  }\n\n  vmult(point: Point): Point {\n    return new Point(this.x * point.x, this.y * point.y);\n  }\n\n  vscale(scale: Point, origin = new Point(0, 0)): Point {\n    return origin.add(this.sub(origin).vmult(scale));\n  }\n\n  sscale(scale: number, origin = new Point(0, 0)): Point {\n    return this.vscale(new Point(scale, scale), origin);\n  }\n}\n","import Point from \"./Point\";\n\nexport default class Size {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Getters\n   */\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  /**\n   * Methods\n   */\n\n  sscale(value: number): Size {\n    return new Size(this.width * value, this.height * value);\n  }\n\n  fitSize(ratio: number): Size {\n    let width: number;\n    let height: number;\n    //\n    if (this.ratio > ratio) {\n      height = this.height;\n      width = height * ratio;\n    }\n    //\n    else {\n      width = this.width;\n      height = width / ratio;\n    }\n    return new Size(width, height);\n  }\n\n  fillSize(ratio: number): Size {\n    let width: number;\n    let height: number;\n    //\n    if (this.ratio > ratio) {\n      width = this.width;\n      height = width / ratio;\n    }\n    //\n    else {\n      height = this.height;\n      width = height * ratio;\n    }\n    return new Size(width, height);\n  }\n}\n","import Point from \"./Point\";\nimport Size from \"./Size\";\n\nexport default class Rectangle {\n  origin: Point;\n  size: Size;\n\n  constructor(origin: Point, size: Size) {\n    this.origin = origin;\n    this.size = size;\n  }\n\n  /**\n   * Getters\n   */\n\n  get x(): number {\n    return this.origin.x;\n  }\n\n  get y(): number {\n    return this.origin.y;\n  }\n\n  get width(): number {\n    return this.size.width;\n  }\n\n  get height(): number {\n    return this.size.height;\n  }\n\n  get ratio(): number {\n    return this.size.ratio;\n  }\n\n  get center(): Point {\n    return this.origin.add(new Point(this.width / 2, this.height / 2));\n  }\n\n  /**\n   * Methods\n   */\n\n  translate(vector: Point): Rectangle {\n    return new Rectangle(this.origin.add(vector), this.size);\n  }\n\n  centerSize(size: Size): Point {\n    const x = this.origin.x + (this.width - size.width) / 2;\n    const y = this.origin.y + (this.height - size.height) / 2;\n    return new Point(x, y);\n  }\n\n  fitRectangleCenter(ratio: number): Rectangle {\n    // Getting the base size\n    const size = this.size.fitSize(ratio);\n    //\n    return new Rectangle(this.centerSize(size), size);\n  }\n\n  fillRectangleCenter(ratio: number): Rectangle {\n    // Getting base size\n    const size = this.size.fillSize(ratio);\n    //\n    return new Rectangle(this.centerSize(size), size);\n  }\n}\n","import Point from \"./Point\";\nimport Size from \"./Size\";\nimport Rectangle from \"./Rectangle\";\n\nexport default class Cell extends Rectangle {\n  index: { i: number; j: number };\n\n  constructor(origin: Point, size: Size, index: { i: number; j: number }) {\n    super(origin, size);\n    this.index = index;\n  }\n\n  /**\n   * Getters\n   */\n\n  get i(): number {\n    return this.index.i;\n  }\n\n  get j(): number {\n    return this.index.j;\n  }\n}\n","import Point from \"./Point\";\nimport Size from \"./Size\";\nimport Cell from \"./Cell\";\n\nexport default class Grid {\n  rows: number;\n  columns: number;\n  cell: Size;\n  spacing: {\n    column: number;\n    row: number;\n  };\n  origin: Point;\n\n  constructor(\n    rows: number,\n    columns: number,\n    cell: Size,\n    spacing = {\n      column: 0,\n      row: 0,\n    },\n    origin = new Point(0, 0)\n  ) {\n    this.rows = rows;\n    this.columns = columns;\n    this.cell = cell;\n    this.spacing = spacing;\n    this.origin = origin;\n  }\n\n  /**\n   * Getters\n   */\n\n  get height(): number {\n    return this.rows * this.cell.height + (this.rows - 1) * this.spacing.row;\n  }\n\n  get width(): number {\n    return (\n      this.columns * this.cell.width + (this.columns - 1) * this.spacing.column\n    );\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  setOrigin(point: Point): Grid {\n    this.origin = point;\n    return this;\n  }\n\n  /**\n   * Methods\n   */\n\n  getCells(origin: Point = this.origin): Array<Cell> {\n    // Array contaning all cells\n    const cells: Array<Cell> = [];\n\n    // Iterating over rows\n    for (let r = 0; r < this.rows; r++) {\n      const y: number = origin.y + r * (this.cell.height + this.spacing.row);\n\n      // Iterating over columns\n      for (let c = 0; c < this.columns; c++) {\n        const x: number =\n          origin.x + c * (this.cell.width + this.spacing.column);\n\n        // Adding new cell\n        cells.push(\n          new Cell(new Point(x, y), this.cell, {\n            i: r,\n            j: c,\n          })\n        );\n      }\n    }\n    return cells;\n  }\n\n  fillHeight(height: number): Grid {\n    const f = height / this.height;\n    return new Grid(this.rows, this.columns, this.cell.sscale(f), {\n      column: this.spacing.column * f,\n      row: this.spacing.row * f,\n    });\n  }\n\n  fillWidth(width: number): Grid {\n    const f = width / this.width;\n    return new Grid(this.rows, this.columns, this.cell.sscale(f), {\n      column: this.spacing.column * f,\n      row: this.spacing.row * f,\n    });\n  }\n}\n","import Grid from \"./Grid\";\nimport Point from \"./Point\";\nimport Rectangle from \"./Rectangle\";\nimport Size from \"./Size\";\n\nexport default function getCanvasGrid(\n  mode: \"fill\" | \"fit\",\n  canvas: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  },\n  grid: {\n    rows: number;\n    columns: number;\n    cell_ratio: number;\n    spacing: { column: number; row: number };\n  }\n): Grid {\n  // Creating canvas rectangle\n  const canvasRect = new Rectangle(\n    new Point(canvas.x, canvas.y),\n    new Size(canvas.width, canvas.height)\n  );\n\n  // Creating unit grid\n  const unitGrid = new Grid(\n    grid.rows,\n    grid.columns,\n    new Size(grid.cell_ratio, 1),\n    grid.spacing\n  );\n\n  // Creating grid rectangle\n  let gridRect: Rectangle;\n  if (mode == \"fill\") {\n    gridRect = canvasRect.fillRectangleCenter(unitGrid.ratio);\n  } else {\n    gridRect = canvasRect.fitRectangleCenter(unitGrid.ratio);\n  }\n\n  // Setting origin\n  const origin = canvasRect.origin.add(gridRect.origin);\n\n  // Scaling grid\n  return unitGrid.fillHeight(gridRect.height).setOrigin(origin);\n}\n"],"names":["Point","constructor","x","y","add","point","sub","smult","value","vmult","vscale","scale","origin","sscale","Size","width","height","ratio","fitSize","fillSize","Rectangle","size","center","translate","vector","centerSize","fitRectangleCenter","fillRectangleCenter","Cell","index","i","j","Grid","rows","columns","cell","spacing","column","row","setOrigin","getCells","cells","r","c","push","fillHeight","f","fillWidth","getCanvasGrid","mode","canvas","grid","canvasRect","unitGrid","cell_ratio","gridRect"],"mappings":"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"}