{"version":3,"file":"index.umd.js","sources":["../src/classes.ts"],"sourcesContent":["function round(v: number, d = 2): number {\n  const p = Math.pow(10, d);\n  return Math.round(v * p) / p;\n}\n\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = round(x);\n    this.y = round(y);\n  }\n\n  add(point: Point): Point {\n    return new Point(this.x + point.x, this.y + point.y);\n  }\n\n  smult(value: number): Point {\n    return new Point(this.x * value, this.y * value);\n  }\n\n  vscale(scale: Point, origin = new Point(0, 0)): Point {\n    return new Point(\n      origin.x + (this.x - origin.x) * scale.x,\n      origin.y + (this.y - origin.y) * scale.y\n    );\n  }\n\n  sscale(scale: number, origin = new Point(0, 0)): Point {\n    return this.vscale(new Point(scale, scale), origin);\n  }\n}\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = round(width);\n    this.height = round(height);\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  fitSize(ratio: number): Size {\n    let width: number;\n    let height: number;\n    //\n    if (this.ratio > ratio) {\n      height = this.height;\n      width = height * ratio;\n    }\n    //\n    else {\n      width = this.width;\n      height = width / ratio;\n    }\n    return new Size(width, height);\n  }\n}\n\nexport class Rectangle {\n  origin: Point;\n  size: Size;\n\n  constructor(origin: Point, size: Size) {\n    this.origin = origin;\n    this.size = size;\n  }\n\n  // Simple shortcuts\n\n  get x(): number {\n    return this.origin.x;\n  }\n\n  get y(): number {\n    return this.origin.y;\n  }\n\n  get width(): number {\n    return this.size.width;\n  }\n\n  get height(): number {\n    return this.size.height;\n  }\n\n  get ratio(): number {\n    return this.size.ratio;\n  }\n\n  //\n\n  translate(vector: Point): Rectangle {\n    return new Rectangle(this.origin.add(vector), this.size);\n  }\n\n  fitRectangleCenter(ratio: number): Rectangle {\n    // Getting the base size\n    const size = this.size.fitSize(ratio);\n    // Then we calculate its new x & y\n    const x = this.origin.x + (this.width - size.width) / 2;\n    const y = this.origin.y + (this.height - size.height) / 2;\n    //\n    return new Rectangle(new Point(x, y), size);\n  }\n}\n\nexport class Cell extends Rectangle {\n  index: { i: number; j: number };\n\n  constructor(origin: Point, size: Size, index: { i: number; j: number }) {\n    super(origin, size);\n    this.index = index;\n  }\n\n  get i(): number {\n    return this.index.i;\n  }\n\n  get j(): number {\n    return this.index.j;\n  }\n}\n\nexport class UnitGrid {\n  rows: number;\n  columns: number;\n  cell_ratio: number;\n  spacing: {\n    column: number;\n    row: number;\n  };\n\n  constructor(\n    rows: number,\n    columns: number,\n    cell_ratio = 1,\n    spacing = { column: 0, row: 0 }\n  ) {\n    this.rows = rows;\n    this.columns = columns;\n    this.cell_ratio = cell_ratio;\n    this.spacing = spacing;\n  }\n\n  get height(): number {\n    /**\n     * number of cells in a column   * cell height +\n     * number of gaps between colums * gap height\n     */\n    return this.rows * 1 + (this.rows - 1) * this.spacing.row;\n  }\n\n  get width(): number {\n    /**\n     * number of cell in row        * cell width +\n     * number of gaps between rows  * gap width\n     */\n    return (\n      this.columns * this.cell_ratio + (this.columns - 1) * this.spacing.column\n    );\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  getCellHeightFromGridHeight(height: number): number {\n    return height / this.height;\n  }\n\n  getCellHeightFromGridWidth(width: number): number {\n    return width / this.width;\n  }\n\n  getCells(cell_height = 1, translation = new Point(0, 0)): Array<Cell> {\n    const cells: Array<Cell> = [];\n    for (let r = 0; r < this.rows; r++) {\n      const y: number = r * (1 + this.spacing.row);\n      for (let c = 0; c < this.columns; c++) {\n        const x: number = c * (this.cell_ratio + this.spacing.column);\n        const origin = new Point(x, y).sscale(cell_height).add(translation);\n        cells.push(\n          new Cell(\n            origin,\n            new Size(cell_height * this.cell_ratio, cell_height),\n            {\n              i: r,\n              j: c,\n            }\n          )\n        );\n      }\n    }\n    return cells;\n  }\n}\n"],"names":["round","v","d","p","Math","pow","Point","x","y","this","add","point","smult","value","vscale","scale","origin","sscale","Size","width","height","fitSize","ratio","Rectangle","size","translate","vector","fitRectangleCenter","Cell","index","_this","_createClass","i","j","UnitGrid","rows","columns","cell_ratio","spacing","column","row","getCellHeightFromGridHeight","getCellHeightFromGridWidth","getCells","cell_height","translation","cells","r","c","push"],"mappings":"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"}