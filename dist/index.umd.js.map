{"version":3,"file":"index.umd.js","sources":["../src/Point.ts","../src/Size.ts","../src/Rectangle.ts","../src/Cell.ts","../src/Grid.ts","../src/getCanvasGrid.ts"],"sourcesContent":["export default class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(point: Point): Point {\n    return new Point(this.x + point.x, this.y + point.y);\n  }\n\n  sub(point: Point): Point {\n    return new Point(this.x - point.x, this.y - point.y);\n  }\n\n  smult(value: number): Point {\n    return new Point(this.x * value, this.y * value);\n  }\n\n  vmult(point: Point): Point {\n    return new Point(this.x * point.x, this.y * point.y);\n  }\n\n  vscale(scale: Point, origin = new Point(0, 0)): Point {\n    return origin.add(this.sub(origin).vmult(scale));\n  }\n\n  sscale(scale: number, origin = new Point(0, 0)): Point {\n    return this.vscale(new Point(scale, scale), origin);\n  }\n}\n","import Point from \"./Point\";\n\nexport default class Size {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Getters\n   */\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  /**\n   * Methods\n   */\n\n  sscale(value: number): Size {\n    return new Size(this.width * value, this.height * value);\n  }\n\n  fitSize(ratio: number): Size {\n    let width: number;\n    let height: number;\n    //\n    if (this.ratio > ratio) {\n      height = this.height;\n      width = height * ratio;\n    }\n    //\n    else {\n      width = this.width;\n      height = width / ratio;\n    }\n    return new Size(width, height);\n  }\n\n  fillSize(ratio: number): Size {\n    let width: number;\n    let height: number;\n    //\n    if (this.ratio > ratio) {\n      width = this.width;\n      height = width / ratio;\n    }\n    //\n    else {\n      height = this.height;\n      width = height * ratio;\n    }\n    return new Size(width, height);\n  }\n}\n","import Point from \"./Point\";\nimport Size from \"./Size\";\n\nexport default class Rectangle {\n  origin: Point;\n  size: Size;\n\n  constructor(origin: Point, size: Size) {\n    this.origin = origin;\n    this.size = size;\n  }\n\n  /**\n   * Getters\n   */\n\n  get x(): number {\n    return this.origin.x;\n  }\n\n  get y(): number {\n    return this.origin.y;\n  }\n\n  get width(): number {\n    return this.size.width;\n  }\n\n  get height(): number {\n    return this.size.height;\n  }\n\n  get ratio(): number {\n    return this.size.ratio;\n  }\n\n  /**\n   * Methods\n   */\n\n  translate(vector: Point): Rectangle {\n    return new Rectangle(this.origin.add(vector), this.size);\n  }\n\n  centerSize(size: Size): Point {\n    const x = this.origin.x + (this.width - size.width) / 2;\n    const y = this.origin.y + (this.height - size.height) / 2;\n    return new Point(x, y);\n  }\n\n  fitRectangleCenter(ratio: number): Rectangle {\n    // Getting the base size\n    const size = this.size.fitSize(ratio);\n    //\n    return new Rectangle(this.centerSize(size), size);\n  }\n\n  fillRectangleCenter(ratio: number): Rectangle {\n    // Getting base size\n    const size = this.size.fillSize(ratio);\n    //\n    return new Rectangle(this.centerSize(size), size);\n  }\n}\n","import Point from \"./Point\";\nimport Size from \"./Size\";\nimport Rectangle from \"./Rectangle\";\n\nexport default class Cell extends Rectangle {\n  index: { i: number; j: number };\n\n  constructor(origin: Point, size: Size, index: { i: number; j: number }) {\n    super(origin, size);\n    this.index = index;\n  }\n\n  /**\n   * Getters\n   */\n\n  get i(): number {\n    return this.index.i;\n  }\n\n  get j(): number {\n    return this.index.j;\n  }\n}\n","import Point from \"./Point\";\nimport Size from \"./Size\";\nimport Cell from \"./Cell\";\n\nexport default class Grid {\n  rows: number;\n  columns: number;\n  cell: Size;\n  spacing: {\n    column: number;\n    row: number;\n  };\n  origin: Point;\n\n  constructor(\n    rows: number,\n    columns: number,\n    cell: Size,\n    spacing = {\n      column: 0,\n      row: 0,\n    },\n    origin = new Point(0, 0)\n  ) {\n    this.rows = rows;\n    this.columns = columns;\n    this.cell = cell;\n    this.spacing = spacing;\n    this.origin = origin;\n  }\n\n  /**\n   * Getters\n   */\n\n  get height(): number {\n    return this.rows * this.cell.height + (this.rows - 1) * this.spacing.row;\n  }\n\n  get width(): number {\n    return (\n      this.columns * this.cell.width + (this.columns - 1) * this.spacing.column\n    );\n  }\n\n  get ratio(): number {\n    return this.width / this.height;\n  }\n\n  setOrigin(point: Point): Grid {\n    this.origin = point;\n    return this;\n  }\n\n  /**\n   * Methods\n   */\n\n  getCells(origin: Point = this.origin): Array<Cell> {\n    // Array contaning all cells\n    const cells: Array<Cell> = [];\n\n    // Iterating over rows\n    for (let r = 0; r < this.rows; r++) {\n      const y: number = origin.y + r * (this.cell.height + this.spacing.row);\n\n      // Iterating over columns\n      for (let c = 0; c < this.columns; c++) {\n        const x: number =\n          origin.x + c * (this.cell.width + this.spacing.column);\n\n        // Adding new cell\n        cells.push(\n          new Cell(new Point(x, y), this.cell, {\n            i: r,\n            j: c,\n          })\n        );\n      }\n    }\n    return cells;\n  }\n\n  fillHeight(height: number): Grid {\n    const f = height / this.height;\n    return new Grid(this.rows, this.columns, this.cell.sscale(f), {\n      column: this.spacing.column * f,\n      row: this.spacing.row * f,\n    });\n  }\n\n  fillWidth(width: number): Grid {\n    const f = width / this.width;\n    return new Grid(this.rows, this.columns, this.cell.sscale(f), {\n      column: this.spacing.column * f,\n      row: this.spacing.row * f,\n    });\n  }\n}\n","import Grid from \"./Grid\";\nimport Point from \"./Point\";\nimport Rectangle from \"./Rectangle\";\nimport Size from \"./Size\";\n\nexport default function getCanvasGrid(\n  mode: \"fill\" | \"fit\",\n  canvas: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  },\n  grid: {\n    rows: number;\n    columns: number;\n    cell_ratio: number;\n    spacing: { column: number; row: number };\n  }\n): Grid {\n  // Creating canvas rectangle\n  const canvasRect = new Rectangle(\n    new Point(canvas.x, canvas.y),\n    new Size(canvas.width, canvas.height)\n  );\n\n  // Creating unit grid\n  const unitGrid = new Grid(\n    grid.rows,\n    grid.columns,\n    new Size(grid.cell_ratio, 1),\n    grid.spacing\n  );\n\n  // Creating grid rectangle\n  let gridRect: Rectangle;\n  if (mode == \"fill\") {\n    gridRect = canvasRect.fillRectangleCenter(unitGrid.ratio);\n  } else {\n    gridRect = canvasRect.fitRectangleCenter(unitGrid.ratio);\n  }\n\n  // Setting origin\n  const origin = canvasRect.origin.add(gridRect.origin);\n\n  // Scaling grid\n  return unitGrid.fillHeight(gridRect.height).setOrigin(origin);\n}\n"],"names":["Point","x","y","add","point","sub","smult","value","vmult","vscale","scale","origin","sscale","Size","width","height","fitSize","ratio","fillSize","Rectangle","size","translate","vector","centerSize","fitRectangleCenter","fillRectangleCenter","Cell","index","i","j","Grid","rows","columns","cell","spacing","column","row","setOrigin","getCells","cells","r","c","push","fillHeight","f","fillWidth","getCanvasGrid","mode","canvas","grid","canvasRect","unitGrid","cell_ratio","gridRect"],"mappings":"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"}